# Average bot for strongest people!
"""
bot_advanced.py
‚ñ∏ /start         ‚Äì –ø—Ä–∏–≤–µ—Ç + –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∫–Ω–æ–ø–∫–æ–π
‚ñ∏ /m             ‚Äì –≤—ã–≤–µ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–æ–¥–µ–ª–µ–π
‚ñ∏ /help          ‚Äì –≤—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
‚ñ∏ /clear         ‚Äì —Å—Ç–µ—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é
‚ñ∏ /reset         ‚Äì —Å—Ç–µ—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
‚ñ∏ /ctx add <txt> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
‚ñ∏ /ctx del       ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
‚ñ∏ /thinking on|off ‚Äì –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–∫—Ä—ã—Ç–∏–µ <think>
‚ñ∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpg/png/gif/‚Ä¶) + –ø–æ–¥–ø–∏—Å—å ‚Äì vision-–∑–∞–ø—Ä–æ—Å
"""
import os
import tempfile
import mimetypes
import re
from pathlib import Path
from collections import defaultdict
from dotenv import load_dotenv
from ollama import Client
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_THINK_TAG = re.compile(r"<think>.*?</think>", re.DOTALL)

def strip_thinking(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ <think></think>."""
    while _THINK_TAG.search(text):
        text = _THINK_TAG.sub("", text)
    return text

VISION_FAMILIES = {"gemma3", "llava", "llama3.2-vision"}

def supports_vision(model: str) -> bool:
    """True, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–ø–æ—Å–æ–±–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    family = model.split(":", 1)[0]
    if family in VISION_FAMILIES:
        return True
    return any(tag in model for tag in VISION_FAMILIES)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
client = Client(host="http://localhost:11434")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def new_state():
    return {"model": None, "history": [], "context": [], "thinking": True}
chats = defaultdict(new_state)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ
async def list_models() -> list[str]:
    async with httpx.AsyncClient() as session:
        resp = await session.get("http://localhost:11434/api/tags")
        resp.raise_for_status()
        tags = resp.json()
    raw = tags.get("models", [])
    return sorted([m.get("name") for m in raw if isinstance(m, dict) and "name" in m])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–¥–µ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def model_keyboard() -> InlineKeyboardMarkup:
    models = await list_models()
    buttons = [[InlineKeyboardButton(m, callback_data=f"MODEL|{m}")] for m in models]
    return InlineKeyboardMarkup(buttons)

async def cb_switch_model(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, model = q.data.split("|", 1)
    st = chats[q.message.chat_id]
    st["model"] = model
    await q.edit_message_text(f"‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ *{model}*", parse_mode="Markdown")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π LLM-–±–æ—Ç.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /m ‚Äì –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n"
        "‚Ä¢ /clear ‚Äì –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "‚Ä¢ /reset ‚Äì –∏—Å—Ç–æ—Ä–∏—è+–∫–æ–Ω—Ç–µ–∫—Å—Ç=√ò\n"
        "‚Ä¢ /ctx add <txt> /ctx del ‚Äì —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "‚Ä¢ /thinking on|off ‚Äì —Å–∫—Ä—ã–≤–∞—Ç—å <think>"
    )
    await update.message.reply_text(text)

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    st = chats[cid]
    if st["model"] is None:
        models = await list_models()
        st["model"] = models[0] if models else None
    text = (
        "üëã –Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π LLM-–±–æ—Ç.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /help ‚Äì –≤—ã–∑–æ–≤ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n"
        "‚Ä¢ /m ‚Äì –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n"
        "‚Ä¢ /clear ‚Äì –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "‚Ä¢ /reset ‚Äì –∏—Å—Ç–æ—Ä–∏—è+–∫–æ–Ω—Ç–µ–∫—Å—Ç=√ò\n"
        "‚Ä¢ /ctx add <txt> /ctx del ‚Äì —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "‚Ä¢ /thinking on|off ‚Äì —Å–∫—Ä—ã–≤–∞—Ç—å <think>\n\n"
        "–ù–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /m."
    )
    await update.message.reply_text(text, reply_markup=await model_keyboard())

async def cmd_m(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=await model_keyboard())

async def cmd_clear(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chats[update.effective_chat.id]["history"].clear()
    await update.message.reply_text("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")

async def cmd_reset(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = chats[update.effective_chat.id]
    st["history"].clear()
    st["context"].clear()
    await update.message.reply_text("üîÑ –ò—Å—Ç–æ—Ä–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω—ã.")

async def cmd_ctx(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if len(ctx.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ctx add <txt> –∏–ª–∏ /ctx del")
        return
    st = chats[update.effective_chat.id]
    if ctx.args[0] == "add":
        text = " ".join(ctx.args[1:])
        st["context"].append({"role": "system", "content": text})
        await update.message.reply_text("‚ûï –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        st["context"].clear()
        await update.message.reply_text("‚ûñ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–¥–∞–ª—ë–Ω.")

async def cmd_thinking(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args or ctx.args[0] not in ("on", "off"):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /thinking on|off")
        return
    chats[update.effective_chat.id]["thinking"] = ctx.args[0] == "on"
    await update.message.reply_text(f"üß† –†–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π: {ctx.args[0]}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def chat_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    st = chats[cid]
    if st["model"] is None:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
            reply_markup=await model_keyboard(),
        )
        return
    st["history"].append({"role": "user", "content": update.message.text})
    msgs = st["context"] + st["history"]
    res = client.chat(model=st["model"], messages=msgs)
    answer = res["message"]["content"]
    # –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω, —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ <think>...</think> –∏–∑ –æ—Ç–≤–µ—Ç–∞
    if not st.get("thinking", True):
        answer = strip_thinking(answer)
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (CJK Unified Ideographs)
    answer = re.sub(r"[‰∏Ä-Èøø]+", "", answer)
    st["history"].append({"role": "assistant", "content": answer})
    await update.message.reply_text(answer)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def chat_image(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    st = chats[cid]
    if st["model"] is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–Ω–∞—á–∞–ª–∞.")
        return
    if not supports_vision(st["model"]):
        await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return
    try:
        file_obj = None
        ext = None
        if update.message.photo:
            largest = update.message.photo[-1]
            await update.message.reply_photo(largest.file_id, caption="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            file_obj = await largest.get_file()
            ext = ".jpg"
        elif update.message.document and update.message.document.mime_type.startswith("image/"):
            doc = update.message.document
            await update.message.reply_document(doc.file_id, caption="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            file_obj = await doc.get_file()
            ext = Path(doc.file_name).suffix or mimetypes.guess_extension(doc.mime_type) or ""
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpg/png/gif/‚Ä¶)")
            return
        tmp = tempfile.mkdtemp()
        img_path = Path(tmp) / f"{file_obj.file_id}{ext}"
        await file_obj.download_to_drive(img_path)
        prompt = update.message.caption or "–û–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        st["history"].append({"role": "user", "content": prompt, "images": [str(img_path)]})
        msgs = st["context"] + st["history"]
        res = client.chat(model=st["model"], messages=msgs)
        answer = res["message"]["content"]
        if not st.get("thinking", True):
            answer = strip_thinking(answer)
        st["history"].append({"role": "assistant", "content": answer})
        await update.message.reply_text(answer)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("m", cmd_m))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("clear", cmd_clear))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CommandHandler("ctx", cmd_ctx))
    app.add_handler(CommandHandler("thinking", cmd_thinking))
    app.add_handler(CallbackQueryHandler(cb_switch_model, pattern=r"^MODEL\|"))
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, chat_image))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_text))
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()